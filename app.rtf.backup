{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red201\green219\blue252;\red15\green15\blue15;\red31\green151\blue54;
}
{\*\expandedcolortbl;;\cssrgb\c82745\c89020\c99216\c70196;\cssrgb\c7059\c7059\c7059;\cssrgb\c11765\c64314\c27451;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Replace this firebaseConfig with YOUR config from Step 3\
const firebaseConfig = \{\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  apiKey: \cf4 \strokec4 "AIzaSyDNlN-eA1dpGy0ecukF0xJGgoqSXcQE9TM"\cf2 \strokec2 ,\cb1 \
\cb3 \'a0 authDomain: \cf4 \strokec4 "medicine-tracker-6f4ca.firebaseapp.com"\cf2 \strokec2 ,\cb1 \
\cb3 \'a0 databaseURL: \cf4 \strokec4 "https://medicine-tracker-6f4ca-default-rtdb.europe-west1.firebasedatabase.app"\cf2 \strokec2 ,\cb1 \
\cb3 \'a0 projectId: \cf4 \strokec4 "medicine-tracker-6f4ca"\cf2 \strokec2 ,\cb1 \
\cb3 \'a0 storageBucket: \cf4 \strokec4 "medicine-tracker-6f4ca.firebasestorage.app"\cf2 \strokec2 ,\cb1 \
\cb3 \'a0 messagingSenderId: \cf4 \strokec4 "526944861480"\cf2 \strokec2 ,\cb1 \
\cb3 \'a0 appId: \cf4 \strokec4 "1:526944861480:web:0235aef69ff7f16169a41d"\cf2 \cb1 \strokec2 \
\cb3 \};\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
function MedicineTracker() \{\
  const [history, setHistory] = React.useState(\{\});\
  const [loading, setLoading] = React.useState(true);\
  const [error, setError] = React.useState(null);\
  \
  const today = new Date().toDateString();\
  const todayTaken = history[today] || false;\
\
  // Initialize Firebase\
  React.useEffect(() => \{\
    const initFirebase = async () => \{\
      try \{\
        // Import Firebase dynamically\
        const \{ initializeApp \} = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js');\
        const \{ getDatabase, ref, onValue, set \} = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js');\
        \
        // Initialize Firebase\
        const app = initializeApp(firebaseConfig);\
        const database = getDatabase(app);\
        const historyRef = ref(database, 'medicineHistory');\
        \
        // Listen for data changes\
        onValue(historyRef, (snapshot) => \{\
          const data = snapshot.val();\
          setHistory(data || \{\});\
          setLoading(false);\
        \}, (error) => \{\
          console.error('Firebase error:', error);\
          setError('Failed to load data. Using local storage.');\
          // Fallback to localStorage\
          const localData = localStorage.getItem('medicineHistory');\
          setHistory(localData ? JSON.parse(localData) : \{\});\
          setLoading(false);\
        \});\
\
        // Store Firebase functions for later use\
        window.firebaseDB = database;\
        window.firebaseSet = set;\
        window.firebaseRef = ref;\
        \
      \} catch (error) \{\
        console.error('Firebase initialization failed:', error);\
        setError('Using local storage mode.');\
        // Fallback to localStorage\
        const localData = localStorage.getItem('medicineHistory');\
        setHistory(localData ? JSON.parse(localData) : \{\});\
        setLoading(false);\
      \}\
    \};\
\
    initFirebase();\
  \}, []);\
\
  const saveToStorage = async (newHistory) => \{\
    try \{\
      if (window.firebaseDB && window.firebaseSet && window.firebaseRef) \{\
        // Save to Firebase\
        const historyRef = window.firebaseRef(window.firebaseDB, 'medicineHistory');\
        await window.firebaseSet(historyRef, newHistory);\
      \} else \{\
        // Fallback to localStorage\
        localStorage.setItem('medicineHistory', JSON.stringify(newHistory));\
      \}\
    \} catch (error) \{\
      console.error('Save failed:', error);\
      // Always fallback to localStorage\
      localStorage.setItem('medicineHistory', JSON.stringify(newHistory));\
    \}\
  \};\
\
  const toggleToday = async () => \{\
    const newHistory = \{\
      ...history,\
      [today]: !todayTaken\
    \};\
    setHistory(newHistory);\
    await saveToStorage(newHistory);\
  \};\
\
  // Generate last 7 days for history\
  const getLast7Days = () => \{\
    const days = [];\
    for (let i = 6; i >= 0; i--) \{\
      const date = new Date();\
      date.setDate(date.getDate() - i);\
      days.push(date);\
    \}\
    return days;\
  \};\
\
  const formatDate = (date) => \{\
    const today = new Date().toDateString();\
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString();\
    const dateStr = date.toDateString();\
    \
    if (dateStr === today) return 'Today';\
    if (dateStr === yesterday) return 'Yesterday';\
    return date.toLocaleDateString('en-US', \{ weekday: 'short', month: 'short', day: 'numeric' \});\
  \};\
\
  if (loading) \{\
    return React.createElement('div', \{\
      className: "max-w-sm mx-auto bg-white min-h-screen flex items-center justify-center"\
    \}, React.createElement('div', \{\
      className: "text-center"\
    \}, [\
      React.createElement('div', \{\
        key: "spinner",\
        className: "animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-2"\
      \}),\
      React.createElement('p', \{\
        key: "text",\
        className: "text-gray-600"\
      \}, "Loading your medicine history...")\
    ]));\
  \}\
\
  return React.createElement('div', \{\
    className: "max-w-sm mx-auto bg-white min-h-screen"\
  \}, [\
    // Header\
    React.createElement('div', \{\
      key: "header",\
      className: "bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 text-center"\
    \}, [\
      React.createElement('h1', \{\
        key: "title",\
        className: "text-2xl font-bold mb-2"\
      \}, "\uc0\u55357 \u56458  Medicine"),\
      React.createElement('p', \{\
        key: "subtitle",\
        className: "text-blue-100"\
      \}, "Did you take it today?"),\
      error && React.createElement('p', \{\
        key: "error",\
        className: "text-yellow-200 text-xs mt-2"\
      \}, `\uc0\u9888 \u65039  $\{error\}`)\
    ]),\
\
    // Today's status\
    React.createElement('div', \{\
      key: "today",\
      className: "p-6"\
    \}, React.createElement('button', \{\
      onClick: toggleToday,\
      className: `w-full p-6 rounded-2xl border-2 transition-all $\{\
        todayTaken\
          ? 'bg-green-50 border-green-300 text-green-700'\
          : 'bg-gray-50 border-gray-200 text-gray-700 hover:border-blue-300'\
      \}`\
    \}, React.createElement('div', \{\
      className: "flex items-center justify-center gap-3"\
    \}, [\
      React.createElement('div', \{\
        key: "check",\
        className: `w-12 h-12 rounded-full border-2 flex items-center justify-center $\{\
          todayTaken\
            ? 'bg-green-500 border-green-500 text-white'\
            : 'border-gray-300'\
        \}`\
      \}, todayTaken && "\uc0\u10003 "),\
      React.createElement('div', \{\
        key: "text",\
        className: "text-left"\
      \}, [\
        React.createElement('div', \{\
          key: "today-text",\
          className: "font-semibold text-lg"\
        \}, "Today"),\
        React.createElement('div', \{\
          key: "status",\
          className: "text-sm opacity-75"\
        \}, todayTaken ? 'Taken \uc0\u10003 ' : 'Not taken yet')\
      ])\
    ]))),\
\
    // History\
    React.createElement('div', \{\
      key: "history",\
      className: "px-6 pb-6"\
    \}, [\
      React.createElement('h2', \{\
        key: "history-title",\
        className: "text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2"\
      \}, ["\uc0\u55357 \u56517 ", " Last 7 Days"]),\
      \
      React.createElement('div', \{\
        key: "history-list",\
        className: "space-y-2"\
      \}, getLast7Days().map(date => \{\
        const dateStr = date.toDateString();\
        const taken = history[dateStr] || false;\
        const isToday = dateStr === today;\
        \
        return React.createElement('div', \{\
          key: dateStr,\
          className: `flex items-center justify-between p-3 rounded-lg $\{\
            isToday ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50'\
          \}`\
        \}, [\
          React.createElement('span', \{\
            key: "date",\
            className: `font-medium $\{isToday ? 'text-blue-700' : 'text-gray-700'\}`\
          \}, formatDate(date)),\
          \
          React.createElement('div', \{\
            key: "check",\
            className: `w-6 h-6 rounded-full border-2 flex items-center justify-center $\{\
              taken\
                ? 'bg-green-500 border-green-500 text-white'\
                : 'border-gray-300'\
            \}`\
          \}, taken && "\uc0\u10003 ")\
        ]);\
      \}))\
    ]),\
\
    // Footer\
    React.createElement('div', \{\
      key: "footer",\
      className: "p-6 pt-0"\
    \}, React.createElement('div', \{\
      className: "text-center text-xs text-gray-500"\
    \}, `Data syncs automatically $\{error ? 'to local storage' : 'across all your devices'\}`))\
  ]);\
\}\
\
// Render the app\
ReactDOM.render(React.createElement(MedicineTracker), document.getElementById('root'));}
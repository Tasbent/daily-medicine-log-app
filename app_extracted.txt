// Replace this firebaseConfig with YOUR config from Step 3
const firebaseConfig = {
 apiKey: "***REMOVED***",
  authDomain: "medicine-tracker-6f4ca.firebaseapp.com",
  databaseURL: "https://medicine-tracker-6f4ca-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "medicine-tracker-6f4ca",
  storageBucket: "medicine-tracker-6f4ca.firebasestorage.app",
  messagingSenderId: "526944861480",
  appId: "1:526944861480:web:0235aef69ff7f16169a41d"
};


function MedicineTracker() {
  const [history, setHistory] = React.useState({});
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState(null);
  
  const today = new Date().toDateString();
  const todayTaken = history[today] || false;

  // Initialize Firebase
  React.useEffect(() => {
    const initFirebase = async () => {
      try {
        // Import Firebase dynamically
        const { initializeApp } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js');
        const { getDatabase, ref, onValue, set } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js');
        
        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const database = getDatabase(app);
        const historyRef = ref(database, 'medicineHistory');
        
        // Listen for data changes
        onValue(historyRef, (snapshot) => {
          const data = snapshot.val();
          setHistory(data || {});
          setLoading(false);
        }, (error) => {
          console.error('Firebase error:', error);
          setError('Failed to load data. Using local storage.');
          // Fallback to localStorage
          const localData = localStorage.getItem('medicineHistory');
          setHistory(localData ? JSON.parse(localData) : {});
          setLoading(false);
        });

        // Store Firebase functions for later use
        window.firebaseDB = database;
        window.firebaseSet = set;
        window.firebaseRef = ref;
        
      } catch (error) {
        console.error('Firebase initialization failed:', error);
        setError('Using local storage mode.');
        // Fallback to localStorage
        const localData = localStorage.getItem('medicineHistory');
        setHistory(localData ? JSON.parse(localData) : {});
        setLoading(false);
      }
    };

    initFirebase();
  }, []);

  const saveToStorage = async (newHistory) => {
    try {
      if (window.firebaseDB && window.firebaseSet && window.firebaseRef) {
        // Save to Firebase
        const historyRef = window.firebaseRef(window.firebaseDB, 'medicineHistory');
        await window.firebaseSet(historyRef, newHistory);
      } else {
        // Fallback to localStorage
        localStorage.setItem('medicineHistory', JSON.stringify(newHistory));
      }
    } catch (error) {
      console.error('Save failed:', error);
      // Always fallback to localStorage
      localStorage.setItem('medicineHistory', JSON.stringify(newHistory));
    }
  };

  const toggleToday = async () => {
    const newHistory = {
      ...history,
      [today]: !todayTaken
    };
    setHistory(newHistory);
    await saveToStorage(newHistory);
  };

  // Generate last 7 days for history
  const getLast7Days = () => {
    const days = [];
    for (let i = 6; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      days.push(date);
    }
    return days;
  };

  const formatDate = (date) => {
    const today = new Date().toDateString();
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString();
    const dateStr = date.toDateString();
    
    if (dateStr === today) return 'Today';
    if (dateStr === yesterday) return 'Yesterday';
    return date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });
  };

  if (loading) {
    return React.createElement('div', {
      className: "max-w-sm mx-auto bg-white min-h-screen flex items-center justify-center"
    }, React.createElement('div', {
      className: "text-center"
    }, [
      React.createElement('div', {
        key: "spinner",
        className: "animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-2"
      }),
      React.createElement('p', {
        key: "text",
        className: "text-gray-600"
      }, "Loading your medicine history...")
    ]));
  }

  return React.createElement('div', {
    className: "max-w-sm mx-auto bg-white min-h-screen"
  }, [
    // Header
    React.createElement('div', {
      key: "header",
      className: "bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 text-center"
    }, [
      React.createElement('h1', {
        key: "title",
        className: "text-2xl font-bold mb-2"
      }, "💊 Medicine"),
      React.createElement('p', {
        key: "subtitle",
        className: "text-blue-100"
      }, "Did you take it today?"),
      error && React.createElement('p', {
        key: "error",
        className: "text-yellow-200 text-xs mt-2"
      }, `⚠️ ${error}`)
    ]),

    // Today's status
    React.createElement('div', {
      key: "today",
      className: "p-6"
    }, React.createElement('button', {
      onClick: toggleToday,
      className: `w-full p-6 rounded-2xl border-2 transition-all ${
        todayTaken
          ? 'bg-green-50 border-green-300 text-green-700'
          : 'bg-gray-50 border-gray-200 text-gray-700 hover:border-blue-300'
      }`
    }, React.createElement('div', {
      className: "flex items-center justify-center gap-3"
    }, [
      React.createElement('div', {
        key: "check",
        className: `w-12 h-12 rounded-full border-2 flex items-center justify-center ${
          todayTaken
            ? 'bg-green-500 border-green-500 text-white'
            : 'border-gray-300'
        }`
      }, todayTaken && "✓"),
      React.createElement('div', {
        key: "text",
        className: "text-left"
      }, [
        React.createElement('div', {
          key: "today-text",
          className: "font-semibold text-lg"
        }, "Today"),
        React.createElement('div', {
          key: "status",
          className: "text-sm opacity-75"
        }, todayTaken ? 'Taken ✓' : 'Not taken yet')
      ])
    ]))),

    // History
    React.createElement('div', {
      key: "history",
      className: "px-6 pb-6"
    }, [
      React.createElement('h2', {
        key: "history-title",
        className: "text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2"
      }, ["📅", " Last 7 Days"]),
      
      React.createElement('div', {
        key: "history-list",
        className: "space-y-2"
      }, getLast7Days().map(date => {
        const dateStr = date.toDateString();
        const taken = history[dateStr] || false;
        const isToday = dateStr === today;
        
        return React.createElement('div', {
          key: dateStr,
          className: `flex items-center justify-between p-3 rounded-lg ${
            isToday ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50'
          }`
        }, [
          React.createElement('span', {
            key: "date",
            className: `font-medium ${isToday ? 'text-blue-700' : 'text-gray-700'}`
          }, formatDate(date)),
          
          React.createElement('div', {
            key: "check",
            className: `w-6 h-6 rounded-full border-2 flex items-center justify-center ${
              taken
                ? 'bg-green-500 border-green-500 text-white'
                : 'border-gray-300'
            }`
          }, taken && "✓")
        ]);
      }))
    ]),

    // Footer
    React.createElement('div', {
      key: "footer",
      className: "p-6 pt-0"
    }, React.createElement('div', {
      className: "text-center text-xs text-gray-500"
    }, `Data syncs automatically ${error ? 'to local storage' : 'across all your devices'}`))
  ]);
}

// Render the app
ReactDOM.render(React.createElement(MedicineTracker), document.getElementById('root'));